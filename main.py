import telebot
from db import *
from dotenv import load_dotenv
from ocr import ocr_image, questions_list
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import os

load_dotenv()
TOKEN = os.getenv("TOKEN")
bot = telebot.TeleBot(TOKEN)

users = {}  # –¢–∏–º—á–∞—Å–æ–≤–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ID —Å–µ—Å—ñ–π


@bot.message_handler(commands=['start'])
def start(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è"))
    markup.add(KeyboardButton("–£–≤—ñ–π—Ç–∏"))
    bot.send_message(message.chat.id, "–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=markup)


@bot.message_handler(func=lambda msg: msg.text == "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è")
def register(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –Ω—ñ–∫–Ω–µ–π–º:")
    bot.register_next_step_handler(message, get_username)


def get_username(message):
    username = message.text
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å:")
    bot.register_next_step_handler(message, lambda msg: save_user(msg, username))


def save_user(message, username):
    password = message.text
    if register_user(username, password):
        bot.send_message(message.chat.id, "‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –¢–µ–ø–µ—Ä —É–≤—ñ–π–¥—ñ—Ç—å —É —Å–≤—ñ–π –∞–∫–∞—É–Ω—Ç.")
    else:
        bot.send_message(message.chat.id, "‚ùå –¢–∞–∫–∏–π –Ω—ñ–∫ –≤–∂–µ —ñ—Å–Ω—É—î. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π.")


@bot.message_handler(func=lambda msg: msg.text == "–£–≤—ñ–π—Ç–∏")
def login(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω—ñ–∫–Ω–µ–π–º:")
    bot.register_next_step_handler(message, check_username)


def check_username(message):
    username = message.text
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å:")
    bot.register_next_step_handler(message, lambda msg: verify_user(msg, username))


def verify_user(message, username):
    password = message.text
    user_id = login_user(username, password)
    if user_id:
        users[message.chat.id] = user_id
        bot.send_message(message.chat.id, """
                    –ü—Ä–∏–≤—ñ—Ç! –û—Å—å –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –±–æ—Ç–∞ (–≤–∞—Ä—Ç–æ –∑–∞–∫—Ä—ñ–ø–∏—Ç–∏ –≤ —á–∞—Ç—ñ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ) ‚úçÔ∏è
                    
                    /start ‚Äì –ø–æ—á–∞—Ç–∏, –æ—Ç–∞–∫–æ—ó, –≤–∂–µ –ø–æ—á–∞–ª–∏!
                    /photo ‚Äì –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –∑ —è–∫–æ–≥–æ –∑–∞–ø–∏—à—É—Ç—å—Å—è –ø–∏—Ç–∞–Ω–Ω—è (–ø–æ –æ–¥–Ω–æ–º—É ! )
                    /add ‚Äì –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –≤—Ä—É—á–Ω—É
                    /random ‚Äì –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è!
                    /list ‚Äì –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ—ñ—ñ—ñ—ñ –ø–∏—Ç–∞–Ω–Ω—è
                    /delete_all ‚Äì –æ–Ω—ñ—ñ, –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è‚Ä¶
""")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


@bot.message_handler(commands=['add'])
def add_question_handler(message):
    if message.chat.id in users:
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è:")
        bot.register_next_step_handler(message, save_question)
    else:
        bot.send_message(message.chat.id, "–°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–π–¥—ñ—Ç—å —É —Å–∏—Å—Ç–µ–º—É!")


def save_question(message):
    user_id = users[message.chat.id]
    add_question(user_id, message.text)
    bot.send_message(message.chat.id, "‚úÖ –ü–∏—Ç–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ!")


@bot.message_handler(commands=['random'])
def random_question_handler(message):
    if message.chat.id in users:
        user_id = users[message.chat.id]
        question = get_random_question(user_id)
        bot.send_message(message.chat.id, question if question else "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø–∏—Ç–∞–Ω—å!")
    else:
        bot.send_message(message.chat.id, "–°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–π–¥—ñ—Ç—å —É —Å–∏—Å—Ç–µ–º—É!")


@bot.message_handler(commands=['list'])
def list_questions_handler(message):
    if message.chat.id in users:
        user_id = users[message.chat.id]
        questions = get_all_questions(user_id)
        bot.send_message(message.chat.id, "\n".join(questions) if questions else "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø–∏—Ç–∞–Ω—å!")
    else:
        bot.send_message(message.chat.id, "–°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–π–¥—ñ—Ç—å —É —Å–∏—Å—Ç–µ–º—É!")


@bot.message_handler(commands=['delete_all'])
def delete_all_questions_handler(message):
    if message.chat.id in users:
        user_id = users[message.chat.id]
        delete_all_questions(user_id)
        bot.send_message(message.chat.id, "‚úÖ –£—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ!")
    else:
        bot.send_message(message.chat.id, "–°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–π–¥—ñ—Ç—å —É —Å–∏—Å—Ç–µ–º—É!")


def create_language_markup():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"))
    markup.add(KeyboardButton("üá¨üáß English"))
    return markup


@bot.message_handler(commands=['photo'])
def photo_handler(message):
    if message.chat.id in users:
        # –ó–∞–ø–∏—Ç—É—î–º–æ –º–æ–≤—É
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É —Ç–µ–∫—Å—Ç—É –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ: üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –∞–±–æ üá¨üáß English",
                         reply_markup=create_language_markup())
        # –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É
        bot.register_next_step_handler(message, lambda msg: process_photo_language(msg, message))
    else:
        bot.send_message(message.chat.id, "–°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–π–¥—ñ—Ç—å —É —Å–∏—Å—Ç–µ–º—É!")


def process_photo_language(message, original_message):
    lang = 'ukr' if message.text == "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" else 'eng'
    user_id= users[original_message.chat.id]
    # –î–∞–ª—ñ —á–µ–∫–∞—î–º–æ –Ω–∞ —Ñ–æ—Ç–æ
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∑ —Ç–µ–∫—Å—Ç–æ–º.")
    bot.register_next_step_handler(message, lambda msg: handle_photo_with_language(msg, original_message, lang))


def handle_photo_with_language(message, original_message, lang):
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ–æ—Ç–æ
    if message.content_type == 'photo':
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        image_path = f"temp_{original_message.chat.id}.jpg"

        with open(image_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        # –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –Ω–∞ —Ñ–æ—Ç–æ
        text = ocr_image(image_path, lang=lang)
        os.remove(image_path)

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø–∏—Ç–∞–Ω—å —ñ –¥–æ–¥–∞—î–º–æ —ó—Ö –¥–æ –ë–î
        questions = questions_list(text)
        if questions:
            for q in questions:
                user_id = users[message.chat.id]
                add_question(user_id, q)
            bot.send_message(original_message.chat.id, f"‚úÖ –î–æ–¥–∞–Ω–æ {len(questions)} –ø–∏—Ç–∞–Ω—å —ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è!")
        else:
            bot.send_message(original_message.chat.id, "‚ùå –ù–µ –≤–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è!")
    else:
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ.")


if __name__ == "__main__":
    init_db()
    bot.polling(none_stop=True)